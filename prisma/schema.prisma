// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Define the `User` table in the database
model User {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  email     String  @unique
  hash      String
  validated Boolean @default(false)
  blocked   Boolean @default(false)

  validation_token   String?
  new_email          String?
  new_email_token    String?
  new_password_token String?

  firstName String
  lastName  String

  gender   Gender?
  address  String?
  birthday Int?
  height   Int? // im cm
  weight   Float? // in kg
  role     Role    @default(USER)

  // Indirect dependencies
  activities Activity[]
  news       News[]
  projects   UsersOnProjects[] // n to m relation

  // Direct dependecies
  universityId Int?
  university   University? @relation(fields: [universityId], references: [id])
}

// Define the `Project` table in the database
model Project {
  id         Int @id @default(autoincrement())
  start_date Int
  end_date   Int

  name        String
  description String @db.Text()

  //Indirect dependencies
  activities Activity[]
  users      UsersOnProjects[] // n to m relation
}

// Define the `UsersOnProjects` table in the database
model UsersOnProjects {
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id])
  projectId Int     @unique
  project   Project @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}

// Define the `Activity` table in the database
model Activity {
  id Int @id @default(autoincrement())

  start_date       Int
  end_date         Int
  hearthrate       Int?
  steps            Int?
  distance         Float? // in km
  bloodSugarOxygen Float?

  //Direct dependencies
  userId         Int
  user           User?        @relation(fields: [userId], references: [id])
  activityTypeId Int
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  projectId      Int
  project        Project?     @relation(fields: [projectId], references: [id])
}

// Define the `ActivityType` table in the database
model ActivityType {
  id Int @id @default(autoincrement())

  name String

  //Indirect dependencies
  activities Activity[]
}

// Define the `University` table in the database
model University {
  id Int @id @default(autoincrement())

  name    String
  address String

  //Indirect dependencies
  users User[]
}

// Define the `News` table in the database
model News {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  title String
  text  String @db.Text

  //Direct dependencies
  userId Int?
  user   User? @relation(fields: [userId], references: [id])
}

// Enum to define the User-Role
enum Role {
  USER
  SCIENTIST
  ADMIN
}

// Enum to define Genders
enum Gender {
  MALE
  FEMALE
  DIVERSE
}
